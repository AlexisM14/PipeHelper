Index: calculs.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import numpy as np\r\nfrom verifications import *\r\nfrom gestion_BDD_fluides import *\r\nfrom gestion_BDD_materiaux import *\r\nfrom gestion_BDD_geometries import *\r\n\r\n\r\ng = 9.81\r\n\r\n\r\n# Définition de la fonction qui calcule le nombre de reynolds\r\ndef calculer_reynolds(vitesse, diametre, viscosite_cine):\r\n    \"\"\"Calcule le nombre de Reynolds\"\"\"\r\n    # vitesse en m/s - diametre en m - viscorsite_cine en m2/s\r\n    re = vitesse * diametre / viscosite_cine\r\n    print(f\"Reynolds : {re}\")\r\n    return re\r\n\r\n\r\ndef calculer_debit2vitesse(debit, diametre, section):\r\n    surface = 1\r\n    if section == 'rond':\r\n        surface = np.pi*(diametre/2)**2\r\n    return debit/surface\r\n\r\n\r\n# Définition de la fonction qui calcule le coefficient de perte de charge\r\ndef calculer_coef_perte_de_charge(reynolds, rugosite, diametre):\r\n    \"\"\"Renvoie le coefficient de perte de charge selon le nomre de Reynolds\"\"\"\r\n    # rugosite et diametre en mm - reynolds sans unite\r\n    # formule https://fr.wikipedia.org/wiki/%C3%89quation_de_Darcy-Weisbach\r\n    if reynolds < 2320:\r\n    #if reynolds > 0:\r\n        # Loi de Hagen-Poiseuille\r\n        return 64 / reynolds\r\n    else:\r\n        if rugosite == 0:\r\n            # Correlation de Blasius\r\n            return 0.3164 * reynolds ** (-1/4)\r\n\r\n        # Corrélation de Serguides\r\n        A = -2 * np.log10((rugosite/(diametre*3.7) + 12/reynolds))\r\n        B = -2 * np.log10((rugosite/(diametre*3.7) + 2.51*A/reynolds))\r\n        C = -2 * np.log10((rugosite/(diametre*3.7) + 2.51*B/reynolds))\r\n        return A - ((B-A)**2)/(C-2*B+A)\r\n\r\n\r\n# Définition de la fonction de calcul de pression selon la formule de Poiseuille\r\ndef calculer_pression_poiseuille(debit_vol, viscosite_cine, pression_entree, longueur_canal, rayon_canal):\r\n    \"\"\"Renvoie la différence de pression de sortie dans un écoulement de Poiseuille\"\"\"\r\n    # debit_col en m3/s - viscosite_cine en m2/s - pression_entree en Pa - longueur_canal, rayon_canal en m\r\n    return 8 * viscosite_cine * longueur_canal * debit_vol / (np.pi * rayon_canal**4)\r\n\r\n\r\n# Définition de la fonction qui calcule les pertes de charges régulières\r\ndef calculer_perte_reguliere(longueur, diametre, vitesse, viscosite_cine, rugosite, densite):\r\n    \"\"\"Renvoie la différence de pression en sortie d'un endroit pouvant provoquer une perte de charge régulière\"\"\"\r\n    # longueur, diametre, rugosite en m - vitesse en m/s - viscosite_cine en m2/s - densite en kg/m2 -\r\n    # pression_entree en Pa\r\n    reynolds = calculer_reynolds(vitesse, diametre, viscosite_cine)\r\n    fd = calculer_coef_perte_de_charge(reynolds, rugosite, diametre)\r\n    print(f\"coef regu : {fd}\")\r\n    return fd * longueur * densite * vitesse**2 / (diametre * 2)\r\n\r\n\r\n# Définition de la fonction qui calcule les pertes de charges liée à un changement brusque de section\r\ndef calculer_perte_chgt_brusque_section(vitesse, section_entree, densite, section_sortie, pression_entree):\r\n    \"\"\"Renvoie la différence de pression en sortie d'un changement brusaue de section\"\"\"\r\n    # vitesse en m/s - section_entree, section_sortie en m - densite en kg/m3 - pression_entree en Pa\r\n    if section_entree < section_sortie:\r\n        ksi = (1 - section_entree/section_sortie)**2\r\n        # il faut multiplier par la vitesse d'entrée\r\n        return pression_entree + densite * ksi * vitesse ** 2 / 2\r\n    else:\r\n        C = 0.63 + 0.37 * (section_sortie/section_entree)**2\r\n        ksi = (1/C - 1)**2\r\n        # il faut multiplier par la vitesse de sortie\r\n        return densite * ksi * vitesse ** 2 / 2\r\n\r\n\r\n# Définition de la fonction qui renvoie la pression en sortie de la pompe\r\ndef calculer_pression_sortie_pompe(puissance, rendement, debit, pression_entree):\r\n    \"\"\"Renvoie la différence de pression en sortie d'une pompe\"\"\"\r\n    # puissance en W - debit en m3/s - pression_entree en Pa - rendement sans unité\r\n    return pression_entree + rendement * puissance/debit\r\n\r\n\r\ndef calculer_perte_singuliere(coef_perte_signuliere, densite, vitesse_init):\r\n    return coef_perte_signuliere * densite * vitesse_init**2 / 2\r\n\r\n\r\ndef calculer_vitesse_sortie(vitesse_entree, pression_entree, pression_sortie, delta_reguliere, densite, coef_singuliere):\r\n    A = ((pression_entree - pression_sortie - delta_reguliere) / (densite * (1 + coef_singuliere)))\r\n    B = (vitesse_entree**2 / (1 + coef_singuliere))\r\n    return np.sqrt(2 * A + B)\r\n\r\n\r\ndef calculer_temperature_sortie(temperature_entree):\r\n    return temperature_entree\r\n\r\n\r\ndef exercice_verif_regu():\r\n    diametre = 14*10**(-3)\r\n    longueur = 10\r\n    rugosite = .1*10**(-3)\r\n\r\n    densite = 900\r\n    viscosite_cine = 30*10**(-6)\r\n    debit = 55*10**(-3)/60\r\n\r\n    vitesse = calculer_debit2vitesse(debit, diametre, 'rond')\r\n    reynolds = calculer_reynolds(vitesse, diametre, viscosite_cine)\r\n    coef_singu = calculer_coef_perte_de_charge(reynolds, 0, diametre)\r\n\r\n    delta_P = calculer_perte_reguliere(longueur, diametre, vitesse, viscosite_cine, 0, densite)\r\n    print(delta_P)
===================================================================
diff --git a/calculs.py b/calculs.py
--- a/calculs.py	
+++ b/calculs.py	
@@ -113,4 +113,9 @@
     coef_singu = calculer_coef_perte_de_charge(reynolds, 0, diametre)
 
     delta_P = calculer_perte_reguliere(longueur, diametre, vitesse, viscosite_cine, 0, densite)
-    print(delta_P)
\ No newline at end of file
+    print(f"vitesse : {vitesse} m/s")
+    print(f"Reynolds : {reynolds}")
+    print(f"Coefficient de perte de charge : {coef_singu}")
+    print(f"Différence de pression : {delta_P/10**5} bar")
+
+exercice_verif_regu()
\ No newline at end of file
