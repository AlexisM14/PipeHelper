Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\" Ce script permet de générer l'affichage du programme\"\"\"\r\nfrom classes import *\r\nfrom calculs import *\r\nfrom verifications import *\r\nfrom gestion_BDD_materiaux import lister_les_materiaux, afficher_materiaux, recuperer_rugosite\r\nfrom gestion_BDD_geometries import recuperer_attribut_geo\r\nfrom gestion_traces import tracer_canalisations, tracer_pression_vitesse_1d\r\n\r\nliste_o_n = ['oui', 'non']\r\n# Pour l'instant, on fait que section rondes\r\nliste_sections = ['rond']\r\nliste_materiaux = lister_les_materiaux()\r\nliste_geometrie_angle = ['coude D', 'coude B']\r\nliste_geometries = ['droit'] + liste_geometrie_angle\r\nliste_rap_coude = recuperer_attribut_geo('coude', 'rapport rayon diametre')\r\nrapport_rayon_diam_min = min(liste_rap_coude)\r\nrapport_rayon_diam_max = max(liste_rap_coude)\r\n\r\n\r\ndef choisir_materiaux_canalisation(nbre, choix):\r\n    liste = np.array([])\r\n    if choix == 'non':\r\n        for i in range(nbre):\r\n            print(f\"\\n Quel est le matériau du tronçon {i} ? Les matériaux possibles sont :\")\r\n            afficher_materiaux()\r\n            choix_numeros_materiau = get_element_liste_input([str(i) for i in range(len(liste_materiaux))])\r\n            materiau = liste_materiaux[int(choix_numeros_materiau)]\r\n            liste = np.append(liste, materiau)\r\n    else:\r\n        print(f\"\\n Quel est le matériau de la canalisation ? Les matériaux possibles sont :\")\r\n        afficher_materiaux()\r\n        choix_numeros_materiau = get_element_liste_input([str(a) for a in range(len(liste_materiaux))])\r\n        materiau = liste_materiaux[int(choix_numeros_materiau)]\r\n        for kl in range(nbre):\r\n            liste = np.append(liste, materiau)\r\n    return liste\r\n\r\n\r\ndef choisir_rugosite_canalisation(nbre, choix_rugo, choix_mat, liste_mat):\r\n    liste = []\r\n    # Si la rugosité varie\r\n    if choix_rugo == 'non':\r\n        for j in range(nbre):\r\n            print(f\"Connaissez-vous la rugosité du tronçon {j} ?\")\r\n            choix_connaitre_rugosite = get_element_liste_input(liste_o_n)\r\n            if choix_connaitre_rugosite == 'oui':\r\n                print(f\"\\n Quelle est la rugosité du tronçon {j} en m ? Si aucune rugosité, entrez 0.\")\r\n                rugosite = get_float_input('+')\r\n                liste = np.append(liste, rugosite)\r\n            else:\r\n                print(\"La rugosité choisie sera alors celle de la base de données.\")\r\n                rugosite = recuperer_rugosite(liste_mat[j]) * 10 ** (-3)\r\n                print(f\"Elle vaut {rugosite} m.\")\r\n                liste = np.append(liste, rugosite)\r\n    # Si la rugosité est constante\r\n    else:\r\n        # Si le matériau est identique\r\n        if choix_mat == 'oui':\r\n            print(f\"Connaissez-vous la rugosité de la canalisation ?\")\r\n            choix_connaitre_rugosite = get_element_liste_input(liste_o_n)\r\n            # Si la rugosité est connue\r\n            if choix_connaitre_rugosite == 'oui':\r\n                print(f\"\\n Quelle est la rugosité de la canalisation en m ? Si aucune rugosité, entrez 0.\")\r\n                rugosite = get_float_input('+')\r\n            else:\r\n                print(\"La rugosité choisie sera alors celle de la base de données.\")\r\n                rugosite = recuperer_rugosite(liste_mat[0]) * 10 ** (-3)\r\n                print(f\"Elle vaut {rugosite} m.\")\r\n        else:\r\n            print(f\"\\n Quelle est la rugosité de la canalisation en m ? Si aucune rugosité, entrez 0.\")\r\n            rugosite = get_float_input('+')\r\n\r\n        for lsp in range(nbre):\r\n            liste = np.append(liste, rugosite)\r\n    return liste\r\n\r\n\r\ndef choisir_geometrie_canalisation(nbre):\r\n    liste = []\r\n    for i in range(nbre):\r\n        print(f\"\\n Quelle est la géométrie du tronçon {i} ?\")\r\n        print(\"'coude D' et 'coude G' correspondent respectivement à un coude qui fait dévier le fluide vers \"\r\n              \"sa droite et sa gauche.\")\r\n        geometrie = get_element_liste_input(liste_geometries)\r\n\r\n        # Verification de la possibilité de la configuration\r\n        if i > 0:\r\n\r\n            if geometrie in liste_geometrie_angle:\r\n                coude_precedent = liste[0]\r\n                for j in liste:\r\n                    if j in liste_geometrie_angle:\r\n                        coude_precedent = j\r\n\r\n                # configurations impossibles\r\n                if coude_precedent == 'coude H':\r\n                    while geometrie == 'coude B':\r\n                        print(\"Cette configuration n'est pas possible :\")\r\n                        print(f\"{coude_precedent} ne peut être suivie de {geometrie}\")\r\n                        print(f\"\\n Veuillez entrer à nouveau la géométrie du tronçon {i}.\")\r\n                        geometrie = get_element_liste_input(liste_geometries)\r\n                elif coude_precedent == 'coude D':\r\n                    while geometrie == 'coude G':\r\n                        print(\"Cette configuration n'est pas possible :\")\r\n                        print(f\"{coude_precedent} ne peut être suivie de {geometrie}\")\r\n                        print(f\"\\n Veuillez entrer à nouveau la géométrie du tronçon {i}.\")\r\n                        geometrie = get_element_liste_input(liste_geometries)\r\n                elif coude_precedent == 'coude B':\r\n                    while geometrie == 'coude H':\r\n                        print(\"Cette configuration n'est pas possible :\")\r\n                        print(f\"{coude_precedent} ne peut être suivie de {geometrie}\")\r\n                        print(f\"\\n Veuillez entrer à nouveau la géométrie du tronçon {i}.\")\r\n                        geometrie = get_element_liste_input(liste_geometries)\r\n                elif coude_precedent == 'coude G':\r\n                    while geometrie == 'coude D':\r\n                        print(\"Cette configuration n'est pas possible :\")\r\n                        print(f\"{coude_precedent} ne peut être suivie de {geometrie}\")\r\n                        print(f\"\\n Veuillez entrer à nouveau la géométrie du tronçon {i}.\")\r\n                        geometrie = get_element_liste_input(liste_geometries)\r\n                coude_precedent = geometrie\r\n        liste = np.append(liste, geometrie)\r\n    return liste\r\n\r\n\r\ndef choisir_longueur_canalisation(nbre, liste_geo):\r\n    liste_long = []\r\n    liste_rayon = []\r\n    for i in range(nbre):\r\n        geometrie = liste_geo[i]\r\n        if geometrie in liste_geometrie_angle:\r\n            print(f\"\\n Quel est le rayon de courbure du coude du tronçon {i} en m ?\")\r\n            rayon = get_float_input('+')\r\n            longueur = rayon*2*np.pi/4  # coude à 90° : 1/4 du périmètre du cercle\r\n        else:\r\n            print(f\"\\n Quelle est la longueur du tronçon {i} en m ?\")\r\n            longueur = get_float_input('+')\r\n            rayon = 0\r\n\r\n        liste_long = np.append(liste_long, longueur)\r\n        liste_rayon = np.append(liste_rayon, rayon)\r\n\r\n    return liste_long, liste_rayon\r\n\r\n\r\ndef verifier_rapport_canalisation(nbre, liste_geo, liste_long, liste_diam, liste_rayon):\r\n    liste = []\r\n    # Vérification du rapport rayon de courbure / diametre\r\n    for i in range(nbre):\r\n        geometrie = liste_geo[i]\r\n        if geometrie in liste_geometrie_angle:\r\n            rayon_courbure = liste_rayon[i]\r\n            diametre = liste_diam[i]\r\n            rapport = rayon_courbure / diametre\r\n            while rapport > rapport_rayon_diam_max or rapport < rapport_rayon_diam_min:\r\n                print(f\"\\n La base de données ne peut calculer les pertes de charges que pour des rapports rayon de \"\r\n                      f\"courbure sur diamètre compris entre {rapport_rayon_diam_min} et {rapport_rayon_diam_max}.\")\r\n                print(f\"Le rapport actuel vaut {rapport}.\")\r\n                print(f\"Veuillez modifier le rayon de courbure du coude du tronçon {i}, il vaut actuellement {rayon_courbure}.\")\r\n                print(f\"\\n Quel est le rayon du tronçon {i} en m ?\")\r\n                rayon_courbure = get_float_input('+')\r\n                rapport = rayon_courbure / diametre\r\n            liste_rayon[i] = rayon_courbure\r\n            liste_long[i] = np.pi*rayon_courbure/2\r\n\r\n    return liste_rayon, liste_long\r\n\r\n\r\ndef trouver_emplacement_pompe(liste_pression, pression_min):\r\n    compteur = 0\r\n    pression_entree = liste_pression[compteur]\r\n    while compteur < len(liste_pression) - 1 and pression_entree > pression_min:\r\n        compteur += 1\r\n        pression_entree = liste_pression[compteur]\r\n    return compteur\r\n\r\n\r\ndef placer_pompe(debit, liste_abscisse, liste_pression, pression_min, puissance, rendement):\r\n\r\n    idx_emplacement_pompe = trouver_emplacement_pompe(liste_pression, pression_min)\r\n\r\n    if idx_emplacement_pompe == len(liste_pression):\r\n        print(\"Le système n'a pas besoin de pompe pour satisfaire les exigences.\")\r\n\r\n    else:\r\n        pression_entree = liste_pression[idx_emplacement_pompe]\r\n        pression_sortie_pompe = calculer_pression_sortie_pompe(puissance, rendement, debit, pression_entree)\r\n\r\n        print(f\"Il faut placer une pompe à {liste_abscisse[idx_emplacement_pompe]} m.\")\r\n        print(f\"La pression en sortie sera de {pression_sortie_pompe / 10 ** 5} bar.\")\r\n        delta_pression_pompe = pression_sortie_pompe - liste_pression[idx_emplacement_pompe]\r\n        liste_pression_new = []\r\n\r\n        for i in range(len(liste_abscisse)):\r\n            if liste_pression[i] > pression_min:\r\n                liste_pression_new = np.append(liste_pression_new, liste_pression[i])\r\n            else:\r\n                liste_pression_new = np.append(liste_pression_new, liste_pression[i] + delta_pression_pompe)\r\n\r\n        plt.plot(liste_abscisse, liste_pression, label='Pression originale')\r\n        plt.plot(liste_abscisse, liste_pression_new, label='Pression avec la pompe')\r\n        plt.title(\"Évolution de la pression le long de la canalisation, en longueur linéaire\")\r\n        plt.xlabel(\"Longueur linéaire en m\")\r\n        plt.ylabel(\"Pression en Pa\")\r\n        plt.axvline(liste_abscisse[idx_emplacement_pompe], color='r', linestyle='--')\r\n        plt.legend()\r\n        plt.show()\r\n        return liste_pression_new\r\n\r\n\r\n\r\ndef interface():\r\n    liste_o_n = ['oui','non']\r\n    # Affichage du principe du script\r\n    print(\"Ce script permet de configurer des canalisations ! \\n\"\r\n          \"En entrant différentes données de votre problème : géométrie, conditions initiales, fluide, ... \\n\"\r\n          \"Le script sera en mesure de vous afficher les variations de pression, vitesse, contrainte. \\n\"\r\n          \"Ainsi il vous indiquera ou placer des pompes par exemple.\\n \\n\"\r\n          \"Pour commencer il faut découper la géométrie des canalisations en tronçons ! \\n\"\r\n          \"Un tronçon est une partie de la géométrie dont la section, la direction ou le matériau ne varie pas. \\n\")\r\n\r\n    # Choix du mode de fonctionnement\r\n    # 1 - normal, 2 - ajout de matériau, 3 - ajout de fluide\r\n    mode = get_choix_mode()\r\n\r\n    # MODE PROBLÈME\r\n    if mode == 1:\r\n        nettoyer_ecran()\r\n        liste_fluides = lister_fluides()\r\n        print(\"\\n Vous entrez dans le mode de résolution de problème.\\n\")\r\n\r\n        # Fluide\r\n        print(\"Quel est le fluide s'écoulant dans les canalisations ?\")\r\n        fluide = get_element_liste_input(liste_fluides)\r\n\r\n        print(\"\\n Combien de tronçons composent la géométrie des canalisations du problème ?\")\r\n        nbre_troncons = get_int_input('+')\r\n\r\n        canalisation = Canalisation()\r\n\r\n        # Choix matériau\r\n        print(\"\\n Le matériau est-il le même dans toute la canalisation ?\")\r\n        choix_materiau = get_element_liste_input(liste_o_n)\r\n        liste_materiau_canalisation = choisir_materiaux_canalisation(nbre_troncons, choix_materiau)\r\n\r\n        # Choix rugosité\r\n        print(\"\")\r\n        print(\"\\n La rugosité est-elle la même dans toute la canalisation ?\")\r\n        choix_rugosite = get_element_liste_input(liste_o_n)\r\n        liste_rugosite_canalisation = choisir_rugosite_canalisation(nbre_troncons, choix_rugosite, choix_materiau, liste_materiau_canalisation)\r\n\r\n        # Choix forme section\r\n        print(\"\\n Quelle est la forme de la section de la canalisation ?\")\r\n        forme_section = get_element_liste_input(liste_sections)\r\n        liste_forme_canalisation = [forme_section]*nbre_troncons\r\n\r\n        # Choix diamètre\r\n        print(\"\\n Quel est le diamètre de la section de la canalisation en m ?\")\r\n        diametre = get_float_input('+')\r\n        liste_diametre_canalisation = [diametre]*nbre_troncons\r\n\r\n        # Conditions initiales\r\n        print(\"\\n Quelles sont les conditions initiales du fluides, en entrée de la canalisation ?\")\r\n        vitesse_init, temperature_init, pression_init, densite_init, viscosite_init, debit = get_init_cond_input(fluide, diametre)\r\n        liste_pression = [pression_init]\r\n        liste_vitesse = [vitesse_init]\r\n        liste_temperature = [temperature_init]\r\n\r\n        # Choix geometrie et angle du tronçon\r\n        liste_geometrie_canalisation = choisir_geometrie_canalisation(nbre_troncons)\r\n\r\n        # Choix longueur de chaque tronçon\r\n        liste_longueur_canalisation, liste_rayon_canalisation = choisir_longueur_canalisation(nbre_troncons, liste_geometrie_canalisation)\r\n\r\n        liste_rayon_canalisation, liste_longueur_canalisation = verifier_rapport_canalisation(nbre_troncons, liste_geometrie_canalisation, liste_longueur_canalisation, liste_diametre_canalisation, liste_rayon_canalisation)\r\n\r\n        # Enregistrement des tronçons et de la canalisation\r\n        for i in range(nbre_troncons):\r\n            longueur = liste_longueur_canalisation[i]\r\n            section = liste_forme_canalisation[i]\r\n            diametre = liste_diametre_canalisation[i]\r\n            materiau = liste_materiau_canalisation[i]\r\n            rugosite = liste_rugosite_canalisation[i]\r\n            geometrie = liste_geometrie_canalisation[i]\r\n            rayon_courbure = liste_rayon_canalisation[i]\r\n\r\n            if i == 0:\r\n                vitesse_entree = vitesse_init\r\n                pression_entree = pression_init\r\n                temperature_entree = temperature_init\r\n            else:\r\n                vitesse_entree = 0\r\n                pression_entree = 0\r\n                temperature_entree = 0\r\n\r\n            troncon = Troncon(longueur, section, diametre, materiau, rugosite, geometrie, rayon_courbure,\r\n                              fluide, vitesse_entree, pression_entree, temperature_entree, densite_init, viscosite_init)\r\n            canalisation.ajouter_troncon(troncon)\r\n\r\n        # Affichage de la géométrie des canalisations\r\n        print(\"La géométrie de votre problème est-elle bien la suivante ?\")\r\n        tracer_canalisations(canalisation)\r\n        confirmation_geometrie = get_element_liste_input(['oui', 'non'])\r\n        if confirmation_geometrie == 'non':\r\n            print(\"Il n'est pas disponible de modifier la géométrie du problème pour l'instant\")\r\n            print(\"voulez-vous recommencer depuis le début ? \")\r\n            choix_recommencer = get_element_liste_input(['oui', 'non'])\r\n            if choix_recommencer == 'oui':\r\n                interface()\r\n                return True\r\n\r\n        # Phase de calculs\r\n        print(\"...Début de la phase de calculs...\")\r\n\r\n        liste_pression, liste_vitesse, liste_temperature, liste_abscisse, _ = canalisation.calculer_distrib_pression_vitesse()\r\n\r\n        tracer_pression_vitesse_1d(liste_pression, liste_vitesse, liste_abscisse, liste_longueur_canalisation)\r\n\r\n        # Phase de placement pompe\r\n        print(\"\")\r\n        print(\"Voulez-vous placer une pompe sur la canalisation ?\")\r\n        choix_pompe = get_element_liste_input(liste_o_n)\r\n        if choix_pompe == 'non':\r\n            print(\"Vous quittez le programme.\")\r\n            return True\r\n        else:\r\n            print(\"Quelle est la valeur de pression sous laquelle il ne faut pas que le fluide descende, en bar ?\")\r\n            pression_min = get_float_between_input(0, pression_init)*10**5\r\n            print(\"Quelle est la puissance de votre pompe, en W ?\")\r\n            puissance_pompe = get_float_input('+')\r\n            print(\"Quel est le rendement de votre pompe, entre 0 et 1 ?\")\r\n            rendement = get_float_between_input(0, 1)\r\n\r\n            placer_pompe(debit, liste_abscisse, liste_pression, pression_min, puissance_pompe, rendement)\r\n\r\n            print(\"Vous quittez le programme.\")\r\n            return True\r\n\r\n\r\n\r\n    # MODE AJOUT/SUPPRESSION DE MATÉRIAU\r\n    elif mode == 2:\r\n        nettoyer_ecran()\r\n        print(\"Non disponible pour l'instant, veuillez entrer dans le mode normal.\")\r\n        print(\"\")\r\n        interface()\r\n        return True\r\n        # print(\"Voici les matériaux actuels de la base de données\")\r\n        # afficher_materiaux()\r\n        # print(\"\\n Voulez-vous ajouter ou supprimer un matériau.\")\r\n        # choix_edition_2 = get_element_liste_input(['ajouter', 'supprimer'])\r\n        #\r\n        # if choix_edition_2 == 'ajouter':\r\n        #     ajouter_materiaux()\r\n        # else:\r\n        #     supprimer_materiaux()\r\n\r\n    # MODE AJOUT/SUPPRESSION DE FLUIDE\r\n    elif mode == 3:\r\n        nettoyer_ecran()\r\n        print(\"Non disponible pour l'instant, veuillez entrer dans le mode normal.\")\r\n        print(\"\")\r\n\r\n        interface()\r\n        return True\r\n        # print(\"Voici les matériaux actuels de la base de données\")\r\n        # afficher_fluide()\r\n        # print(\"\\n Voulez-vous ajouter ou supprimer un matériau.\")\r\n        # choix_edition_3 = get_element_liste_input(['ajouter', 'supprimer'])\r\n        #\r\n        # if choix_edition_3 == 'ajouter':\r\n        #     ajouter_fluides()\r\n        # else:\r\n        #     supprimer_fluides()\r\n\r\n\r\nif __name__ == '__main__':\r\n    interface()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.py b/main.py
--- a/main.py	(revision 01e2152412372cb0cb4c9a52452b5cb19e5d9b87)
+++ b/main.py	(date 1720116423087)
@@ -313,6 +313,7 @@
 
         liste_pression, liste_vitesse, liste_temperature, liste_abscisse, _ = canalisation.calculer_distrib_pression_vitesse()
 
+        print(liste_longueur_canalisation)
         tracer_pression_vitesse_1d(liste_pression, liste_vitesse, liste_abscisse, liste_longueur_canalisation)
 
         # Phase de placement pompe
